# Copyright 2013 OpenStack Foundation
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

from oslo.config import cfg
from stevedore import extension

CONF = cfg.CONF

MIGRATION_NAMESPACE = 'openstack.common.migration'


class MigrationManager(extension.ExtensionManager):

    def initialize_parsers(self, subparsers):

        up_parser = subparsers.add_parser('upgrade')
        up_parser.add_argument('revision', nargs='?', default=None)
        up_parser.set_defaults(func=self.upgrade)

        down_parser = subparsers.add_parser('downgrade')
        down_parser.add_argument('revision', nargs='?')
        down_parser.set_defaults(func=self.downgrade)

        version_parser = subparsers.add_parser('version')
        version_parser.set_defaults(func=self.version)

        revision_parser = subparsers.add_parser('revision')
        revision_parser.set_defaults(func=self.revision)
        revision_parser.add_argument('--message', type=str)
        revision_parser.add_argument('--autogenerate', action='store_true')

        stamp_parser = subparsers.add_parser('stamp')
        stamp_parser.set_defaults(func=self.stamp)
        stamp_parser.add_argument('revision')

    def _load_one_plugin(self, ep, invoke_on_load, invoke_args, invoke_kwds):
        """Initialize plugin only if it passes availability check."""
        plugin = ep.load()
        if plugin.check_available():
            return super(MigrationManager, self)._load_one_plugin(
                ep, invoke_on_load, invoke_args, invoke_kwds)

    @property
    def plugins(self):
        """Returns plugins in sorted order."""
        return sorted(ext.obj for ext in self.extensions)

    def upgrade(self):
        """Upgrade database with all available backends."""
        results = []
        for plugin in self.plugins:
            results.append(plugin.upgrade(CONF.command.revision))
        return results

    def downgrade(self):
        """Downgrade database with available backends."""
        #downgrading should be performed in reversed order
        results = []
        for plugin in reversed(self.plugins):
            results.append(CONF.command.revision)
        return results

    def version(self):
        """Return last version of db."""
        last = None
        for plugin in self.plugins:
            version = plugin.version()
            if version:
                last = version
        return last

    def revision(self):
        """Generate template or autogenerated revision."""
        #revision should be done only by last plugin
        if not self.plugins:
            raise ValueError('There should be at least one plugin active.')
        return self.plugins[-1].revision(
            CONF.command.message,
            CONF.command.autogenerate
        )

    def stamp(self):
        """Create stamp for a given revision."""
        if not self.plugins:
            raise ValueError('There should be at least one plugin active.')
        return self.plugins[-1].stamp(CONF.command.revision)
